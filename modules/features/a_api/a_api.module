<?php
/**
 * @file
 * Main Atlast API file.
 */

/**
 * Implements hook_menu().
 */
function a_api_menu() {
  $items['api/%a_api_instance'] = array(
    'page callback' => 'a_api_main',
    'page arguments' => array(1, 2),
    'access arguments' => array('access atlast api'),
    'type' => MENU_CALLBACK,
    'delivery callback' => 'a_api_json_callback',
  );

  return $items;
}

/**
 * Menu loader, loads the instance argument.
 */
function a_api_instance_load($slug) {
  $uid = db_select('field_data_field_user_slug', 's')
  ->fields('s', array('entity_id'))
  ->condition('field_user_slug_machine', $slug,'=')
  ->execute()
  ->fetchField();

  if ($uid) {
    return user_load($uid);
  }
}

/**
 * Implements hook_permission().
 */
function a_api_permission() {
  return array(
    'access atlast api' =>  array(
      'title' => t('access Atlast API'),
      'description' => t('Access to the Atlast API'),
    ),
  );
}

/**
 * Delivery API callback.
 */
function a_api_json_callback($page_callback_result) {
  drupal_add_http_header('Content-Type', 'application/json');

  // Only render content
  print 'atlastApi(' . json_encode($page_callback_result, JSON_PRETTY_PRINT) . ')';
}

/**
 * Main API callback.
 */
function a_api_main($instance, $timestamp = NULL) {
  // If no instance was found.
  if (!$instance) {
    return array('error' => 'invalid slug');
  }

  $api = module_invoke_all('atlast_api', $instance, $timestamp);

  return $api;
}

/**
 * Implements hook_atlast_api().
 */
function a_api_atlast_api($instance, $timestamp = NULL) {
  $api = array();

  if ($timestamp) {
    $timestamp = 0;
  }

  // Menu
  if (a_api_atlast_api_check_is_needed($instance, 'menu', $timestamp)) {
    $api['menu'] = a_api_atlast_api_get_menu($instance, TRUE);
  }

  // Js
  if (a_api_atlast_api_check_is_needed($instance, 'js', $timestamp)) {
    $api['js'] = a_api_atlast_api_get_js($instance, TRUE);
  }

  return $api;
}

/**
 * Returns the menu, gets cached.
 */
function a_api_atlast_api_get_menu($instance, $reset = NULL) {
  $menu_items = &drupal_static(__FUNCTION__);
  if (!isset($menu_items) || $reset) {
    if ($cache = cache_get('atlast_api_menu_' . $instance->uid) && !$reset) {
      $menu_items = $cache->data;
    }
    else {
      $menu_items = module_invoke_all('atlast_api_menu_items', $instance);

      cache_set('atlast_api_menu_' . $instance->uid, $menu_items, 'cache');
    }
  }

  return $menu_items;
}

/**
 * Returns the js, gets cached.
 */
function a_api_atlast_api_get_js($instance, $reset = NULL) {
  $js = &drupal_static(__FUNCTION__);
  if (!isset($js) || $reset) {
    if ($cache = cache_get('atlast_api_js_' . $instance->uid) && !$reset) {
      $js = $cache->data;
    }
    else {
      $js_hooks = module_invoke_all('atlast_api_js', $instance);
      $js = '';

      include_once(libraries_get_path('jsmin') . '/JSMin.php');

      foreach($js_hooks as $js_entry) {
        $js_content = file_get_contents($js_entry['file']);
        $js .= JSMin::minify($js_content);
      }

      cache_set('atlast_api_js_' . $instance->uid, $js, 'cache');
    }
  }

  return $js;
}

/**
 * Check if the menu needs to be returned to the app.
 */
function a_api_atlast_api_check_is_needed($instance, $key, $timestamp) {
  $cache = cache_get('atlast_api_' . $key . '_' . $instance->uid);

  // Only return the menu if an older version is in the app.
  if (!$cache || $timestamp < $cache->created) {
    return TRUE;
  }
}
